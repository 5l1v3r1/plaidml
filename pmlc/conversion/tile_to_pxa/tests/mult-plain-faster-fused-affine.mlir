module {
  func @mult_plain(%arg0: memref<1x3x1xi64>, %arg1: memref<1x3x1xi64>, %arg2: memref<1x3x8192xi64>, %arg3: memref<2x3x8192xi64>, %arg4: memref<1x3x1xi64>, %arg5: memref<2x3x8192xi64>) {
    %c32_i32 = constant 32 : i32
    %0 = alloc() : memref<2x3x8192xi64>
    %1 = alloc() : memref<2x3x8192xi64>
    affine.for %arg6 = 0 to 2 {
      affine.for %arg7 = 0 to 3 {
        affine.for %arg8 = 0 to 8192 {
          affine.for %arg9 = 0 to 2 {
            %32 = affine.load %arg3[%arg9, %arg7, %arg8] : memref<2x3x8192xi64>
            %33 = affine.load %arg2[0, %arg7, %arg8] : memref<1x3x8192xi64>
            %34 = muli %32, %33 : i64
            affine.store %34, %0[%arg9, %arg7, %arg8] : memref<2x3x8192xi64>
          }
          %2 = affine.load %arg2[0, %arg7, %arg8] : memref<1x3x8192xi64>
          %3 = sexti %c32_i32 : i32 to i64
          %4 = shift_right_unsigned %2, %3 : i64
          %5 = affine.load %arg3[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %6 = trunci %5 : i64 to i32
          %7 = zexti %6 : i32 to i64
          %8 = affine.load %arg2[0, %arg7, %arg8] : memref<1x3x8192xi64>
          %9 = trunci %8 : i64 to i32
          %10 = affine.load %arg3[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %11 = shift_right_unsigned %10, %3 : i64
          %12 = trunci %4 : i64 to i32
          %13 = zexti %9 : i32 to i64
          %14 = muli %13, %11 : i64
          %15 = zexti %12 : i32 to i64
          %16 = muli %7, %15 : i64
          %17 = trunci %14 : i64 to i32
          %18 = trunci %16 : i64 to i32
          %19 = zexti %17 : i32 to i64
          %20 = zexti %18 : i32 to i64
          %21 = muli %7, %13 : i64
          %22 = addi %19, %20 : i64
          %23 = shift_right_unsigned %21, %3 : i64
          %24 = addi %22, %23 : i64
          %25 = muli %11, %15 : i64
          %26 = shift_right_unsigned %24, %3 : i64
          %27 = addi %25, %26 : i64
          %28 = shift_right_unsigned %14, %3 : i64
          %29 = addi %27, %28 : i64
          %30 = shift_right_unsigned %16, %3 : i64
          %31 = addi %29, %30 : i64
          affine.store %31, %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
        }
      }
    }
    affine.for %arg6 = 0 to 2 {
      affine.for %arg7 = 0 to 3 {
        affine.for %arg8 = 0 to 8192 {
          %2 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %3 = trunci %2 : i64 to i32
          %4 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %5 = sexti %c32_i32 : i32 to i64
          %6 = shift_right_unsigned %4, %5 : i64
          %7 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %8 = trunci %7 : i64 to i32
          %9 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %10 = trunci %9 : i64 to i32
          %11 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %12 = shift_right_unsigned %11, %5 : i64
          %13 = trunci %6 : i64 to i32
          %14 = zexti %3 : i32 to i64
          %15 = muli %12, %14 : i64
          %16 = zexti %8 : i32 to i64
          %17 = zexti %13 : i32 to i64
          %18 = muli %16, %17 : i64
          %19 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %20 = trunci %19 : i64 to i32
          %21 = zexti %20 : i32 to i64
          %22 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %23 = trunci %22 : i64 to i32
          %24 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %25 = shift_right_unsigned %24, %5 : i64
          %26 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %27 = shift_right_unsigned %26, %5 : i64
          %28 = trunci %27 : i64 to i32
          %29 = zexti %23 : i32 to i64
          %30 = muli %29, %25 : i64
          %31 = zexti %28 : i32 to i64
          %32 = muli %21, %31 : i64
          %33 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %34 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %35 = muli %33, %34 : i64
          %36 = zexti %10 : i32 to i64
          %37 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %38 = trunci %37 : i64 to i32
          %39 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %40 = shift_right_unsigned %39, %5 : i64
          %41 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %42 = shift_right_unsigned %41, %5 : i64
          %43 = trunci %42 : i64 to i32
          %44 = zexti %38 : i32 to i64
          %45 = muli %44, %40 : i64
          %46 = zexti %43 : i32 to i64
          %47 = muli %36, %46 : i64
          %48 = trunci %15 : i64 to i32
          %49 = trunci %18 : i64 to i32
          %50 = zexti %48 : i32 to i64
          %51 = zexti %49 : i32 to i64
          %52 = muli %12, %17 : i64
          %53 = shift_right_unsigned %15, %5 : i64
          %54 = addi %50, %51 : i64
          %55 = muli %16, %14 : i64
          %56 = shift_right_unsigned %55, %5 : i64
          %57 = addi %52, %53 : i64
          %58 = shift_right_unsigned %18, %5 : i64
          %59 = addi %54, %56 : i64
          %60 = addi %57, %58 : i64
          %61 = shift_right_unsigned %59, %5 : i64
          %62 = addi %60, %61 : i64
          %63 = addi %35, %62 : i64
          %64 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %65 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %66 = muli %64, %65 : i64
          %67 = trunci %30 : i64 to i32
          %68 = trunci %32 : i64 to i32
          %69 = zexti %67 : i32 to i64
          %70 = zexti %68 : i32 to i64
          %71 = muli %21, %29 : i64
          %72 = addi %69, %70 : i64
          %73 = shift_right_unsigned %71, %5 : i64
          %74 = addi %72, %73 : i64
          %75 = muli %25, %31 : i64
          %76 = shift_right_unsigned %74, %5 : i64
          %77 = addi %75, %76 : i64
          %78 = shift_right_unsigned %30, %5 : i64
          %79 = addi %77, %78 : i64
          %80 = shift_right_unsigned %32, %5 : i64
          %81 = cmpi "ult", %63, %35 : i64
          %82 = addi %79, %80 : i64
          %83 = zexti %81 : i1 to i64
          %84 = addi %82, %83 : i64
          %85 = trunci %45 : i64 to i32
          %86 = trunci %47 : i64 to i32
          %87 = zexti %85 : i32 to i64
          %88 = zexti %86 : i32 to i64
          %89 = muli %36, %44 : i64
          %90 = addi %87, %88 : i64
          %91 = shift_right_unsigned %89, %5 : i64
          %92 = addi %90, %91 : i64
          %93 = muli %40, %46 : i64
          %94 = shift_right_unsigned %92, %5 : i64
          %95 = addi %93, %94 : i64
          %96 = shift_right_unsigned %45, %5 : i64
          %97 = addi %95, %96 : i64
          %98 = shift_right_unsigned %47, %5 : i64
          %99 = addi %97, %98 : i64
          %100 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %101 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %102 = muli %100, %101 : i64
          %103 = addi %63, %102 : i64
          %104 = cmpi "ult", %103, %63 : i64
          %105 = zexti %104 : i1 to i64
          %106 = addi %66, %84 : i64
          %107 = addi %99, %105 : i64
          %108 = addi %106, %107 : i64
          %109 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %110 = muli %108, %109 : i64
          %111 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %112 = subi %111, %110 : i64
          %113 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %114 = cmpi "uge", %112, %113 : i64
          %115 = zexti %114 : i1 to i64
          %116 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %117 = muli %115, %116 : i64
          %118 = subi %112, %117 : i64
          affine.store %118, %arg5[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
        }
      }
    }
    return
  }
}
