#map0 = affine_map<(d0, d1, d2) -> (d0, d1, d2)>
#map1 = affine_map<(d0, d1) -> (0, d0, d1)>
#map2 = affine_map<() -> (0)>
#map3 = affine_map<() -> (2)>
#map4 = affine_map<() -> (8192)>
#map5 = affine_map<() -> (3)>
#map6 = affine_map<(d0) -> (0, d0, 0)>
#map7 = affine_map<(d0) -> (d0 + 1)>
#map8 = affine_map<(d0) -> (d0 + 2)>
#map9 = affine_map<(d0) -> (d0 + 3)>


module {
  func @mult_plain(%arg0: memref<1x3x1xi64>, %arg1: memref<1x3x1xi64>, %arg2: memref<1x3x8192xi64>, %arg3: memref<2x3x8192xi64>, %arg4: memref<1x3x1xi64>, %arg5: memref<2x3x8192xi64>) {
    %c32_i32 = constant 32 : i32
    %0 = alloc() : memref<2x3x8192xi64>
    %1 = alloc() : memref<2x3x8192xi64>
    affine.for %arg6 = 0 to 3 {
      affine.for %arg7 = 0 to 8192 {
        affine.for %arg8 = 0 to 2 {
          affine.for %arg9 = 0 to 2 {
            %32 = affine.load %arg3[%arg9, %arg6, %arg7] : memref<2x3x8192xi64>
            %33 = affine.load %arg2[0, %arg6, %arg7] : memref<1x3x8192xi64>
            %34 = muli %32, %33 : i64
            affine.store %34, %0[%arg9, %arg6, %arg7] : memref<2x3x8192xi64>
          }
          %2 = affine.load %arg2[0, %arg6, %arg7] : memref<1x3x8192xi64>
          %3 = sexti %c32_i32 : i32 to i64
          %4 = shift_right_unsigned %2, %3 : i64
          %5 = affine.load %arg3[%arg8, %arg6, %arg7] : memref<2x3x8192xi64>
          %6 = trunci %5 : i64 to i32
          %7 = zexti %6 : i32 to i64
          %8 = affine.load %arg2[0, %arg6, %arg7] : memref<1x3x8192xi64>
          %9 = trunci %8 : i64 to i32
          %10 = affine.load %arg3[%arg8, %arg6, %arg7] : memref<2x3x8192xi64>
          %11 = shift_right_unsigned %10, %3 : i64
          %12 = trunci %4 : i64 to i32
          %13 = zexti %9 : i32 to i64
          %14 = muli %13, %11 : i64
          %15 = zexti %12 : i32 to i64
          %16 = muli %7, %15 : i64
          %17 = trunci %14 : i64 to i32
          %18 = trunci %16 : i64 to i32
          %19 = zexti %17 : i32 to i64
          %20 = zexti %18 : i32 to i64
          %21 = muli %7, %13 : i64
          %22 = addi %19, %20 : i64
          %23 = shift_right_unsigned %21, %3 : i64
          %24 = addi %22, %23 : i64
          %25 = muli %11, %15 : i64
          %26 = shift_right_unsigned %24, %3 : i64
          %27 = addi %25, %26 : i64
          %28 = shift_right_unsigned %14, %3 : i64
          %29 = addi %27, %28 : i64
          %30 = shift_right_unsigned %16, %3 : i64
          %31 = addi %29, %30 : i64
          affine.store %31, %1[%arg8, %arg6, %arg7] : memref<2x3x8192xi64>
        }
      }
    }
    affine.for %arg6 = 0 to 2 {
      affine.for %arg7 = 0 to 3 {
        affine.for %arg8 = 0 to 8192 step 4 {
          %2 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %3 = trunci %2 : i64 to i32
          %4 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %5 = sexti %c32_i32 : i32 to i64
          %6 = shift_right_unsigned %4, %5 : i64
          %7 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %8 = trunci %7 : i64 to i32
          %9 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %10 = trunci %9 : i64 to i32
          %11 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %12 = shift_right_unsigned %11, %5 : i64
          %13 = trunci %6 : i64 to i32
          %14 = zexti %3 : i32 to i64
          %15 = muli %12, %14 : i64
          %16 = zexti %8 : i32 to i64
          %17 = zexti %13 : i32 to i64
          %18 = muli %16, %17 : i64
          %19 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %20 = trunci %19 : i64 to i32
          %21 = zexti %20 : i32 to i64
          %22 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %23 = trunci %22 : i64 to i32
          %24 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %25 = shift_right_unsigned %24, %5 : i64
          %26 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %27 = shift_right_unsigned %26, %5 : i64
          %28 = trunci %27 : i64 to i32
          %29 = zexti %23 : i32 to i64
          %30 = muli %29, %25 : i64
          %31 = zexti %28 : i32 to i64
          %32 = muli %21, %31 : i64
          %33 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %34 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %35 = muli %33, %34 : i64
          %36 = zexti %10 : i32 to i64
          %37 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %38 = trunci %37 : i64 to i32
          %39 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %40 = shift_right_unsigned %39, %5 : i64
          %41 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %42 = shift_right_unsigned %41, %5 : i64
          %43 = trunci %42 : i64 to i32
          %44 = zexti %38 : i32 to i64
          %45 = muli %44, %40 : i64
          %46 = zexti %43 : i32 to i64
          %47 = muli %36, %46 : i64
          %48 = trunci %15 : i64 to i32
          %49 = trunci %18 : i64 to i32
          %50 = zexti %48 : i32 to i64
          %51 = zexti %49 : i32 to i64
          %52 = muli %12, %17 : i64
          %53 = shift_right_unsigned %15, %5 : i64
          %54 = addi %50, %51 : i64
          %55 = muli %16, %14 : i64
          %56 = shift_right_unsigned %55, %5 : i64
          %57 = addi %52, %53 : i64
          %58 = shift_right_unsigned %18, %5 : i64
          %59 = addi %54, %56 : i64
          %60 = addi %57, %58 : i64
          %61 = shift_right_unsigned %59, %5 : i64
          %62 = addi %60, %61 : i64
          %63 = addi %35, %62 : i64
          %64 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %65 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %66 = muli %64, %65 : i64
          %67 = trunci %30 : i64 to i32
          %68 = trunci %32 : i64 to i32
          %69 = zexti %67 : i32 to i64
          %70 = zexti %68 : i32 to i64
          %71 = muli %21, %29 : i64
          %72 = addi %69, %70 : i64
          %73 = shift_right_unsigned %71, %5 : i64
          %74 = addi %72, %73 : i64
          %75 = muli %25, %31 : i64
          %76 = shift_right_unsigned %74, %5 : i64
          %77 = addi %75, %76 : i64
          %78 = shift_right_unsigned %30, %5 : i64
          %79 = addi %77, %78 : i64
          %80 = shift_right_unsigned %32, %5 : i64
          %81 = cmpi "ult", %63, %35 : i64
          %82 = addi %79, %80 : i64
          %83 = zexti %81 : i1 to i64
          %84 = addi %82, %83 : i64
          %85 = trunci %45 : i64 to i32
          %86 = trunci %47 : i64 to i32
          %87 = zexti %85 : i32 to i64
          %88 = zexti %86 : i32 to i64
          %89 = muli %36, %44 : i64
          %90 = addi %87, %88 : i64
          %91 = shift_right_unsigned %89, %5 : i64
          %92 = addi %90, %91 : i64
          %93 = muli %40, %46 : i64
          %94 = shift_right_unsigned %92, %5 : i64
          %95 = addi %93, %94 : i64
          %96 = shift_right_unsigned %45, %5 : i64
          %97 = addi %95, %96 : i64
          %98 = shift_right_unsigned %47, %5 : i64
          %99 = addi %97, %98 : i64
          %100 = affine.load %1[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %101 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %102 = muli %100, %101 : i64
          %103 = addi %63, %102 : i64
          %104 = cmpi "ult", %103, %63 : i64
          %105 = zexti %104 : i1 to i64
          %106 = addi %66, %84 : i64
          %107 = addi %99, %105 : i64
          %108 = addi %106, %107 : i64
          %109 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %110 = muli %108, %109 : i64
          %111 = affine.load %0[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %112 = subi %111, %110 : i64
          %113 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %114 = cmpi "uge", %112, %113 : i64
          %115 = zexti %114 : i1 to i64
          %116 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %117 = muli %115, %116 : i64
          %118 = subi %112, %117 : i64
          affine.store %118, %arg5[%arg6, %arg7, %arg8] : memref<2x3x8192xi64>
          %119 = affine.apply #map7(%arg8)
          %120 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %121 = trunci %120 : i64 to i32
          %122 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %123 = sexti %c32_i32 : i32 to i64
          %124 = shift_right_unsigned %122, %123 : i64
          %125 = affine.load %0[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %126 = trunci %125 : i64 to i32
          %127 = affine.load %1[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %128 = trunci %127 : i64 to i32
          %129 = affine.load %0[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %130 = shift_right_unsigned %129, %123 : i64
          %131 = trunci %124 : i64 to i32
          %132 = zexti %121 : i32 to i64
          %133 = muli %130, %132 : i64
          %134 = zexti %126 : i32 to i64
          %135 = zexti %131 : i32 to i64
          %136 = muli %134, %135 : i64
          %137 = affine.load %0[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %138 = trunci %137 : i64 to i32
          %139 = zexti %138 : i32 to i64
          %140 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %141 = trunci %140 : i64 to i32
          %142 = affine.load %0[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %143 = shift_right_unsigned %142, %123 : i64
          %144 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %145 = shift_right_unsigned %144, %123 : i64
          %146 = trunci %145 : i64 to i32
          %147 = zexti %141 : i32 to i64
          %148 = muli %147, %143 : i64
          %149 = zexti %146 : i32 to i64
          %150 = muli %139, %149 : i64
          %151 = affine.load %0[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %152 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %153 = muli %151, %152 : i64
          %154 = zexti %128 : i32 to i64
          %155 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %156 = trunci %155 : i64 to i32
          %157 = affine.load %1[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %158 = shift_right_unsigned %157, %123 : i64
          %159 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %160 = shift_right_unsigned %159, %123 : i64
          %161 = trunci %160 : i64 to i32
          %162 = zexti %156 : i32 to i64
          %163 = muli %162, %158 : i64
          %164 = zexti %161 : i32 to i64
          %165 = muli %154, %164 : i64
          %166 = trunci %133 : i64 to i32
          %167 = trunci %136 : i64 to i32
          %168 = zexti %166 : i32 to i64
          %169 = zexti %167 : i32 to i64
          %170 = muli %130, %135 : i64
          %171 = shift_right_unsigned %133, %123 : i64
          %172 = addi %168, %169 : i64
          %173 = muli %134, %132 : i64
          %174 = shift_right_unsigned %173, %123 : i64
          %175 = addi %170, %171 : i64
          %176 = shift_right_unsigned %136, %123 : i64
          %177 = addi %172, %174 : i64
          %178 = addi %175, %176 : i64
          %179 = shift_right_unsigned %177, %123 : i64
          %180 = addi %178, %179 : i64
          %181 = addi %153, %180 : i64
          %182 = affine.load %1[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %183 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %184 = muli %182, %183 : i64
          %185 = trunci %148 : i64 to i32
          %186 = trunci %150 : i64 to i32
          %187 = zexti %185 : i32 to i64
          %188 = zexti %186 : i32 to i64
          %189 = muli %139, %147 : i64
          %190 = addi %187, %188 : i64
          %191 = shift_right_unsigned %189, %123 : i64
          %192 = addi %190, %191 : i64
          %193 = muli %143, %149 : i64
          %194 = shift_right_unsigned %192, %123 : i64
          %195 = addi %193, %194 : i64
          %196 = shift_right_unsigned %148, %123 : i64
          %197 = addi %195, %196 : i64
          %198 = shift_right_unsigned %150, %123 : i64
          %199 = cmpi "ult", %181, %153 : i64
          %200 = addi %197, %198 : i64
          %201 = zexti %199 : i1 to i64
          %202 = addi %200, %201 : i64
          %203 = trunci %163 : i64 to i32
          %204 = trunci %165 : i64 to i32
          %205 = zexti %203 : i32 to i64
          %206 = zexti %204 : i32 to i64
          %207 = muli %154, %162 : i64
          %208 = addi %205, %206 : i64
          %209 = shift_right_unsigned %207, %123 : i64
          %210 = addi %208, %209 : i64
          %211 = muli %158, %164 : i64
          %212 = shift_right_unsigned %210, %123 : i64
          %213 = addi %211, %212 : i64
          %214 = shift_right_unsigned %163, %123 : i64
          %215 = addi %213, %214 : i64
          %216 = shift_right_unsigned %165, %123 : i64
          %217 = addi %215, %216 : i64
          %218 = affine.load %1[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %219 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %220 = muli %218, %219 : i64
          %221 = addi %181, %220 : i64
          %222 = cmpi "ult", %221, %181 : i64
          %223 = zexti %222 : i1 to i64
          %224 = addi %184, %202 : i64
          %225 = addi %217, %223 : i64
          %226 = addi %224, %225 : i64
          %227 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %228 = muli %226, %227 : i64
          %229 = affine.load %0[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %230 = subi %229, %228 : i64
          %231 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %232 = cmpi "uge", %230, %231 : i64
          %233 = zexti %232 : i1 to i64
          %234 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %235 = muli %233, %234 : i64
          %236 = subi %230, %235 : i64
          affine.store %236, %arg5[%arg6, %arg7, %119] : memref<2x3x8192xi64>
          %237 = affine.apply #map8(%arg8)
          %238 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %239 = trunci %238 : i64 to i32
          %240 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %241 = sexti %c32_i32 : i32 to i64
          %242 = shift_right_unsigned %240, %241 : i64
          %243 = affine.load %0[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %244 = trunci %243 : i64 to i32
          %245 = affine.load %1[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %246 = trunci %245 : i64 to i32
          %247 = affine.load %0[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %248 = shift_right_unsigned %247, %241 : i64
          %249 = trunci %242 : i64 to i32
          %250 = zexti %239 : i32 to i64
          %251 = muli %248, %250 : i64
          %252 = zexti %244 : i32 to i64
          %253 = zexti %249 : i32 to i64
          %254 = muli %252, %253 : i64
          %255 = affine.load %0[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %256 = trunci %255 : i64 to i32
          %257 = zexti %256 : i32 to i64
          %258 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %259 = trunci %258 : i64 to i32
          %260 = affine.load %0[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %261 = shift_right_unsigned %260, %241 : i64
          %262 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %263 = shift_right_unsigned %262, %241 : i64
          %264 = trunci %263 : i64 to i32
          %265 = zexti %259 : i32 to i64
          %266 = muli %265, %261 : i64
          %267 = zexti %264 : i32 to i64
          %268 = muli %257, %267 : i64
          %269 = affine.load %0[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %270 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %271 = muli %269, %270 : i64
          %272 = zexti %246 : i32 to i64
          %273 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %274 = trunci %273 : i64 to i32
          %275 = affine.load %1[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %276 = shift_right_unsigned %275, %241 : i64
          %277 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %278 = shift_right_unsigned %277, %241 : i64
          %279 = trunci %278 : i64 to i32
          %280 = zexti %274 : i32 to i64
          %281 = muli %280, %276 : i64
          %282 = zexti %279 : i32 to i64
          %283 = muli %272, %282 : i64
          %284 = trunci %251 : i64 to i32
          %285 = trunci %254 : i64 to i32
          %286 = zexti %284 : i32 to i64
          %287 = zexti %285 : i32 to i64
          %288 = muli %248, %253 : i64
          %289 = shift_right_unsigned %251, %241 : i64
          %290 = addi %286, %287 : i64
          %291 = muli %252, %250 : i64
          %292 = shift_right_unsigned %291, %241 : i64
          %293 = addi %288, %289 : i64
          %294 = shift_right_unsigned %254, %241 : i64
          %295 = addi %290, %292 : i64
          %296 = addi %293, %294 : i64
          %297 = shift_right_unsigned %295, %241 : i64
          %298 = addi %296, %297 : i64
          %299 = addi %271, %298 : i64
          %300 = affine.load %1[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %301 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %302 = muli %300, %301 : i64
          %303 = trunci %266 : i64 to i32
          %304 = trunci %268 : i64 to i32
          %305 = zexti %303 : i32 to i64
          %306 = zexti %304 : i32 to i64
          %307 = muli %257, %265 : i64
          %308 = addi %305, %306 : i64
          %309 = shift_right_unsigned %307, %241 : i64
          %310 = addi %308, %309 : i64
          %311 = muli %261, %267 : i64
          %312 = shift_right_unsigned %310, %241 : i64
          %313 = addi %311, %312 : i64
          %314 = shift_right_unsigned %266, %241 : i64
          %315 = addi %313, %314 : i64
          %316 = shift_right_unsigned %268, %241 : i64
          %317 = cmpi "ult", %299, %271 : i64
          %318 = addi %315, %316 : i64
          %319 = zexti %317 : i1 to i64
          %320 = addi %318, %319 : i64
          %321 = trunci %281 : i64 to i32
          %322 = trunci %283 : i64 to i32
          %323 = zexti %321 : i32 to i64
          %324 = zexti %322 : i32 to i64
          %325 = muli %272, %280 : i64
          %326 = addi %323, %324 : i64
          %327 = shift_right_unsigned %325, %241 : i64
          %328 = addi %326, %327 : i64
          %329 = muli %276, %282 : i64
          %330 = shift_right_unsigned %328, %241 : i64
          %331 = addi %329, %330 : i64
          %332 = shift_right_unsigned %281, %241 : i64
          %333 = addi %331, %332 : i64
          %334 = shift_right_unsigned %283, %241 : i64
          %335 = addi %333, %334 : i64
          %336 = affine.load %1[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %337 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %338 = muli %336, %337 : i64
          %339 = addi %299, %338 : i64
          %340 = cmpi "ult", %339, %299 : i64
          %341 = zexti %340 : i1 to i64
          %342 = addi %302, %320 : i64
          %343 = addi %335, %341 : i64
          %344 = addi %342, %343 : i64
          %345 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %346 = muli %344, %345 : i64
          %347 = affine.load %0[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %348 = subi %347, %346 : i64
          %349 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %350 = cmpi "uge", %348, %349 : i64
          %351 = zexti %350 : i1 to i64
          %352 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %353 = muli %351, %352 : i64
          %354 = subi %348, %353 : i64
          affine.store %354, %arg5[%arg6, %arg7, %237] : memref<2x3x8192xi64>
          %355 = affine.apply #map9(%arg8)
          %356 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %357 = trunci %356 : i64 to i32
          %358 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %359 = sexti %c32_i32 : i32 to i64
          %360 = shift_right_unsigned %358, %359 : i64
          %361 = affine.load %0[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %362 = trunci %361 : i64 to i32
          %363 = affine.load %1[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %364 = trunci %363 : i64 to i32
          %365 = affine.load %0[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %366 = shift_right_unsigned %365, %359 : i64
          %367 = trunci %360 : i64 to i32
          %368 = zexti %357 : i32 to i64
          %369 = muli %366, %368 : i64
          %370 = zexti %362 : i32 to i64
          %371 = zexti %367 : i32 to i64
          %372 = muli %370, %371 : i64
          %373 = affine.load %0[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %374 = trunci %373 : i64 to i32
          %375 = zexti %374 : i32 to i64
          %376 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %377 = trunci %376 : i64 to i32
          %378 = affine.load %0[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %379 = shift_right_unsigned %378, %359 : i64
          %380 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %381 = shift_right_unsigned %380, %359 : i64
          %382 = trunci %381 : i64 to i32
          %383 = zexti %377 : i32 to i64
          %384 = muli %383, %379 : i64
          %385 = zexti %382 : i32 to i64
          %386 = muli %375, %385 : i64
          %387 = affine.load %0[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %388 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %389 = muli %387, %388 : i64
          %390 = zexti %364 : i32 to i64
          %391 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %392 = trunci %391 : i64 to i32
          %393 = affine.load %1[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %394 = shift_right_unsigned %393, %359 : i64
          %395 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %396 = shift_right_unsigned %395, %359 : i64
          %397 = trunci %396 : i64 to i32
          %398 = zexti %392 : i32 to i64
          %399 = muli %398, %394 : i64
          %400 = zexti %397 : i32 to i64
          %401 = muli %390, %400 : i64
          %402 = trunci %369 : i64 to i32
          %403 = trunci %372 : i64 to i32
          %404 = zexti %402 : i32 to i64
          %405 = zexti %403 : i32 to i64
          %406 = muli %366, %371 : i64
          %407 = shift_right_unsigned %369, %359 : i64
          %408 = addi %404, %405 : i64
          %409 = muli %370, %368 : i64
          %410 = shift_right_unsigned %409, %359 : i64
          %411 = addi %406, %407 : i64
          %412 = shift_right_unsigned %372, %359 : i64
          %413 = addi %408, %410 : i64
          %414 = addi %411, %412 : i64
          %415 = shift_right_unsigned %413, %359 : i64
          %416 = addi %414, %415 : i64
          %417 = addi %389, %416 : i64
          %418 = affine.load %1[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %419 = affine.load %arg4[0, %arg7, 0] : memref<1x3x1xi64>
          %420 = muli %418, %419 : i64
          %421 = trunci %384 : i64 to i32
          %422 = trunci %386 : i64 to i32
          %423 = zexti %421 : i32 to i64
          %424 = zexti %422 : i32 to i64
          %425 = muli %375, %383 : i64
          %426 = addi %423, %424 : i64
          %427 = shift_right_unsigned %425, %359 : i64
          %428 = addi %426, %427 : i64
          %429 = muli %379, %385 : i64
          %430 = shift_right_unsigned %428, %359 : i64
          %431 = addi %429, %430 : i64
          %432 = shift_right_unsigned %384, %359 : i64
          %433 = addi %431, %432 : i64
          %434 = shift_right_unsigned %386, %359 : i64
          %435 = cmpi "ult", %417, %389 : i64
          %436 = addi %433, %434 : i64
          %437 = zexti %435 : i1 to i64
          %438 = addi %436, %437 : i64
          %439 = trunci %399 : i64 to i32
          %440 = trunci %401 : i64 to i32
          %441 = zexti %439 : i32 to i64
          %442 = zexti %440 : i32 to i64
          %443 = muli %390, %398 : i64
          %444 = addi %441, %442 : i64
          %445 = shift_right_unsigned %443, %359 : i64
          %446 = addi %444, %445 : i64
          %447 = muli %394, %400 : i64
          %448 = shift_right_unsigned %446, %359 : i64
          %449 = addi %447, %448 : i64
          %450 = shift_right_unsigned %399, %359 : i64
          %451 = addi %449, %450 : i64
          %452 = shift_right_unsigned %401, %359 : i64
          %453 = addi %451, %452 : i64
          %454 = affine.load %1[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %455 = affine.load %arg1[0, %arg7, 0] : memref<1x3x1xi64>
          %456 = muli %454, %455 : i64
          %457 = addi %417, %456 : i64
          %458 = cmpi "ult", %457, %417 : i64
          %459 = zexti %458 : i1 to i64
          %460 = addi %420, %438 : i64
          %461 = addi %453, %459 : i64
          %462 = addi %460, %461 : i64
          %463 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %464 = muli %462, %463 : i64
          %465 = affine.load %0[%arg6, %arg7, %355] : memref<2x3x8192xi64>
          %466 = subi %465, %464 : i64
          %467 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %468 = cmpi "uge", %466, %467 : i64
          %469 = zexti %468 : i1 to i64
          %470 = affine.load %arg0[0, %arg7, 0] : memref<1x3x1xi64>
          %471 = muli %469, %470 : i64
          %472 = subi %466, %471 : i64
          affine.store %472, %arg5[%arg6, %arg7, %355] : memref<2x3x8192xi64>
        }
      }
    }
    return
  }
}
